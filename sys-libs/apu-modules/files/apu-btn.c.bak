/*
 * LEDs driver for PCEngines apu
 *
 * Copyright (C) 2013 Christian Herzog <daduke@daduke.org>, based on
 * Petr Leibman's leds-alix
 * Based on leds-wrap.c
 * Hardware info taken from http://www.dpie.com/manuals/miniboards/kontron/KTD-S0043-0_KTA55_SoftwareGuide.pdf
 *
 * 2014-12-8: Mark Schank
 *	- Added GPIO support for the APU push-button switch.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/platform_device.h>
#include <linux/gpio.h>
#include <linux/err.h>
#include <asm/io.h>

#define DRVNAME		"apu-btn"
#define BUTTONADDR	(0xFED801BB)

static struct platform_device *_pdev;

struct apu_btn_priv {
	struct gpio_chip apu_gpio_button;
	unsigned int *b1;
};

static int gpio_apu_button_direction_in(struct gpio_chip *gc, unsigned  gpio_num)
{
	u8 curr_state;
	unsigned int *b1 = ioremap(BUTTONADDR, 1);

	curr_state = ioread8(b1);
	iowrite8(curr_state | (1 << 5), b1);

	return 0;
}

static int gpio_apu_button_get(struct gpio_chip *gc, unsigned gpio_num)
{
	u8 curr_state;
	unsigned int *b1 = ioremap(BUTTONADDR, 1);

	curr_state = ioread8(b1);

	return((curr_state & (1 << 7)) == (1 << 7));
}

static int apu_btn_probe(struct platform_device *pdev)
{
	int ret;
	struct apu_btn_priv *priv;
	struct gpio_chip apu_gpio_button;

	priv = devm_kzalloc(&pdev->dev,
		sizeof(struct apu_btn_priv), GFP_KERNEL);
	if (!priv)
		return -ENOMEM;

	apu_gpio_button.label = "apu_button";
	apu_gpio_button.owner = THIS_MODULE;
	apu_gpio_button.get = gpio_apu_button_get;
	apu_gpio_button.direction_input = gpio_apu_button_direction_in,
	apu_gpio_button.base = 187;
	apu_gpio_button.ngpio = 1;

	priv->apu_gpio_button = apu_gpio_button;
	priv->b1 = ioremap(BUTTONADDR, 1);
	ret = gpiochip_add(&priv->apu_gpio_button);
	if (ret < 0)
		return ret;

	if(!gpio_request_one(187, GPIOF_IN, "Button")){
		gpio_export(187, 0);
	}

	platform_set_drvdata(pdev, priv);

	return ret;
}

static int apu_btn_remove(struct platform_device *pdev)
{
	struct apu_btn_priv *priv;

	priv = platform_get_drvdata(pdev);

	gpiochip_remove(&priv->apu_gpio_button);

	return 0;
}

static struct platform_driver apu_btn_driver = {
	.probe		= apu_btn_probe,
	.remove		= apu_btn_remove,
	.driver		= {
	.name		= DRVNAME,
	.owner		= THIS_MODULE,
	},
};

static int __init apu_btn_init(void) {
	int ret;

	ret = platform_driver_register(&apu_btn_driver);
	if (ret < 0)
		return ret;
	
	_pdev = platform_device_register_simple(DRVNAME, -1, NULL, 0);
	if (IS_ERR(_pdev)) {
		ret = PTR_ERR(_pdev);
		platform_driver_unregister(&apu_btn_driver);
	}

	return ret;
}

static void __exit apu_btn_exit(void) {
	platform_device_unregister(_pdev);
	platform_driver_unregister(&apu_btn_driver);
}

module_init(apu_btn_init);
module_exit(apu_btn_exit);

MODULE_AUTHOR("Christian Herzog");
MODULE_DESCRIPTION("PCEngines apu LED driver");
MODULE_LICENSE("GPL");
