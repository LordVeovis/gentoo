--- src/cxx_supportlib/vendor-modified/boost/math/special_functions/fpclassify.hpp	2013-10-27 00:00:00.000000000 +0200
+++ src/cxx_supportlib/vendor-modified/boost/math/special_functions/fpclassify.hpp	2017-01-15 04:18:44.382076870 +0100
@@ -131,11 +131,11 @@
 }
 #if defined(BOOST_MATH_USE_FLOAT128)
 #if defined(BOOST_MATH_HAS_QUADMATH_H)
-inline bool is_nan_helper(__float128 f, const boost::true_type&) { return ::isnanq(f); }
-inline bool is_nan_helper(__float128 f, const boost::false_type&) { return ::isnanq(f); }
+inline bool is_nan_helper(__float128 f, const boost::true_type&) { return std::isnanq(f); }
+inline bool is_nan_helper(__float128 f, const boost::false_type&) { return std::isnanq(f); }
 #else
-inline bool is_nan_helper(__float128 f, const boost::true_type&) { return ::isnan(static_cast<double>(f)); }
-inline bool is_nan_helper(__float128 f, const boost::false_type&) { return ::isnan(static_cast<double>(f)); }
+inline bool is_nan_helper(__float128 f, const boost::true_type&) { return std::isnan(static_cast<double>(f)); }
+inline bool is_nan_helper(__float128 f, const boost::false_type&) { return std::isnan(static_cast<double>(f)); }
 #endif
 #endif
 }
