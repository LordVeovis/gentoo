diff -ru clean/configure.ac open-vm-tools-10.0.7-3227872/configure.ac
--- clean/configure.ac	2016-10-12 17:31:49.201953680 +0200
+++ open-vm-tools-10.0.7-3227872/configure.ac	2016-10-12 17:35:07.367946593 +0200
@@ -658,6 +658,7 @@
 
 AC_CHECK_FUNCS([ecvt])
 AC_CHECK_FUNCS([fcvt])
+AC_CHECK_FUNCS([getifaddrs getauxval setresuid setresgid issetugid __secure_getenv])
 
 if test "$os" = "freebsd" -a "$osVersion" -ge 600000; then
    AC_CHECK_LIB(
@@ -875,10 +876,13 @@
 ###
 
 AC_CHECK_HEADERS([crypt.h])
+AC_CHECK_HEADERS([ifaddrs.h])
 AC_CHECK_HEADERS([inttypes.h])
 AC_CHECK_HEADERS([stdint.h])
 AC_CHECK_HEADERS([stdlib.h])
 AC_CHECK_HEADERS([wchar.h])
+AC_CHECK_HEADERS([net/if.h])
+AC_CHECK_HEADERS([sys/auxv.h])
 AC_CHECK_HEADERS([sys/inttypes.h])
 AC_CHECK_HEADERS([sys/io.h])
 AC_CHECK_HEADERS([sys/param.h]) # Required to make the sys/user.h check work correctly on FreeBSD
diff -ru clean/lib/misc/idLinux.c open-vm-tools-10.0.7-3227872/lib/misc/idLinux.c
--- clean/lib/misc/idLinux.c	2016-10-12 17:31:48.938953690 +0200
+++ open-vm-tools-10.0.7-3227872/lib/misc/idLinux.c	2016-10-12 17:42:49.118930080 +0200
@@ -27,12 +27,9 @@
 #include <sys/syscall.h>
 #include <string.h>
 #include <unistd.h>
-#ifdef __linux__
-#if defined(__GLIBC__) && \
-           (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 16))
+#ifdef HAVE_SYS_AUXV_H
 #include <sys/auxv.h>
 #endif
-#endif
 #ifdef __APPLE__
 #include <sys/socket.h>
 #include <TargetConditionals.h>
@@ -997,31 +994,32 @@
 static Bool
 IdIsSetUGid(void)
 {
-#if defined(__ANDROID__)
-   /* Android does not have a secure_getenv, so be conservative. */
-   return TRUE;
-#else
    /*
     * We use __secure_getenv, which returns NULL if the binary is
-    * setuid or setgid. Alternatives include,
+    * setuid or setgid, when issetugid or getauxval(AT_SECURE) is not
+    * available. Alternatives include,
     *
-    *   a) getauxval(AT_SECURE); not available until glibc 2.16.
-    *   b) __libc_enable_secure; may not be exported.
+    *   a) issetugid(); not (yet?) available in glibc.
+    *   b) getauxval(AT_SECURE); not available until glibc 2.16.
+    *   c) __libc_enable_secure; may not be exported.
     *
-    * Use (a) when we are based on glibc 2.16, or newer.
+    * Use (b) when we are based on glibc 2.16, or newer.
     */
 
-#if defined(__GLIBC__) && \
-           (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 16))
+#if HAVE_ISSETUGID
+   return issetugid();
+#elif HAVE_GETAUXVAL
    return getauxval(AT_SECURE) != 0;
-#else
+#elif HAVE___SECURE_GETENV
    static const char envName[] = "VMW_SETUGID_TEST";
 
    if (setenv(envName, "1", TRUE) == -1) {
       return TRUE; /* Conservative */
    }
    return __secure_getenv(envName) == NULL;
-#endif
+#else
+   /* Android does not have a secure_getenv, so be conservative. */
+   return TRUE;
 #endif
 }
 #endif
diff -ru clean/lib/nicInfo/nicInfoPosix.c open-vm-tools-10.0.7-3227872/lib/nicInfo/nicInfoPosix.c
--- clean/lib/nicInfo/nicInfoPosix.c	2016-10-12 17:31:48.928953690 +0200
+++ open-vm-tools-10.0.7-3227872/lib/nicInfo/nicInfoPosix.c	2016-10-12 17:55:58.430901852 +0200
@@ -34,9 +34,13 @@
 #include <sys/socket.h>
 #include <sys/stat.h>
 #include <errno.h>
-#if defined(__FreeBSD__) || defined(__APPLE__)
+#if HAVE_SYS_SYSCTL_H
 # include <sys/sysctl.h>
+#endif
+#if HAVE_IFADDRS_H
 # include <ifaddrs.h>
+#endif
+#if HAVE_NET_IF_H
 # include <net/if.h>
 #endif
 #ifndef NO_DNET
@@ -280,7 +284,7 @@
  *
  ******************************************************************************
  */
-#if defined(__FreeBSD__) || defined(__APPLE__) || defined(USERWORLD)
+#if defined(NO_DNET) && defined(HAVE_GETIFADDRS)
 
 char *
 GuestInfoGetPrimaryIP(void)
diff -ru clean/lib/procMgr/procMgrPosix.c open-vm-tools-10.0.7-3227872/lib/procMgr/procMgrPosix.c
--- clean/lib/procMgr/procMgrPosix.c	2016-10-12 17:31:48.798953695 +0200
+++ open-vm-tools-10.0.7-3227872/lib/procMgr/procMgrPosix.c	2016-10-12 17:57:31.566898521 +0200
@@ -137,7 +137,7 @@
 #define  BASH_PATH "/bin/bash"
 #endif
 
-#if defined(linux) && !defined(GLIBC_VERSION_23) && !defined(__UCLIBC__)
+#if defined(linux)
 /*
  * Implements the system calls (they are not wrapped by glibc til 2.3.2).
  *
@@ -146,7 +146,7 @@
  *
  * (In fact, newer Linux kernels don't even define _syscall macros anymore.)
  */
-
+#ifndef HAVE_SETRESUID
 static INLINE int
 setresuid(uid_t ruid,
           uid_t euid,
@@ -154,8 +154,8 @@
 {
    return syscall(__NR_setresuid, ruid, euid, suid);
 }
-
-
+#endif
+#ifndef HAVE_SETRESGID
 static INLINE int
 setresgid(gid_t ruid,
           gid_t euid,
@@ -165,7 +165,7 @@
 }
 #endif
 
-
+#endif
 /*
  *----------------------------------------------------------------------
  *
