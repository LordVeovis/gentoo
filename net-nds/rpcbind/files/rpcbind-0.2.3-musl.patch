--- a/src/check_bound.c	2016-10-11 11:18:16.280303104 +0200
+++ b/src/check_bound.c	2016-10-11 11:18:40.282302246 +0200
@@ -70,7 +70,7 @@
 static struct fdlist *fdtail;
 static char *nullstring = "";
 
-static bool_t check_bound __P((struct fdlist *, char *uaddr));
+static bool_t check_bound(struct fdlist *, char *uaddr);
 
 /*
  * Returns 1 if the given address is bound for the given addr & transport
--- a/src/pmap_svc.c	2016-10-11 11:18:16.280303104 +0200
+++ b/src/pmap_svc.c	2016-10-11 11:19:21.866300758 +0200
@@ -60,11 +60,11 @@
 #include "rpcbind.h"
 #include "xlog.h"
 #include <rpc/svc_soc.h> /* svc_getcaller routine definition */
-static struct pmaplist *find_service_pmap __P((rpcprog_t, rpcvers_t,
-					       rpcprot_t));
-static bool_t pmapproc_change __P((struct svc_req *, SVCXPRT *, u_long));
-static bool_t pmapproc_getport __P((struct svc_req *, SVCXPRT *));
-static bool_t pmapproc_dump __P((struct svc_req *, SVCXPRT *));
+static struct pmaplist *find_service_pmap(rpcprog_t, rpcvers_t,
+					       rpcprot_t);
+static bool_t pmapproc_change(struct svc_req *, SVCXPRT *, u_long);
+static bool_t pmapproc_getport(struct svc_req *, SVCXPRT *);
+static bool_t pmapproc_dump(struct svc_req *, SVCXPRT *);
 
 /*
  * Called for all the version 2 inquiries.
--- a/src/rpcb_svc.c	2016-10-11 11:18:16.280303104 +0200
+++ b/src/rpcb_svc.c	2016-10-11 11:22:33.657293899 +0200
@@ -53,10 +53,10 @@
 #include "rpcbind.h"
 #include "xlog.h"
 
-static void *rpcbproc_getaddr_3_local __P((void *, struct svc_req *, SVCXPRT *,
-					   rpcvers_t));
-static void *rpcbproc_dump_3_local __P((void *, struct svc_req *, SVCXPRT *,
-					rpcvers_t));
+static void *rpcbproc_getaddr_3_local(void *, struct svc_req *, SVCXPRT *,
+					   rpcvers_t);
+static void *rpcbproc_dump_3_local(void *, struct svc_req *, SVCXPRT *,
+					rpcvers_t);
 
 /*
  * Called by svc_getreqset. There is a separate server handle for
@@ -75,7 +75,7 @@
 	} argument;
 	char *result;
 	xdrproc_t xdr_argument, xdr_result;
-	void *(*local) __P((void *, struct svc_req *, SVCXPRT *, rpcvers_t));
+	void *(*local)(void *, struct svc_req *, SVCXPRT *, rpcvers_t);
 	rpcprog_t setprog = 0;
 
 	rpcbs_procinfo(RPCBVERS_3_STAT, rqstp->rq_proc);
--- a/src/rpcb_svc_4.c	2016-10-11 11:18:16.279303104 +0200
+++ b/src/rpcb_svc_4.c	2016-10-11 11:23:24.610292077 +0200
@@ -54,13 +54,13 @@
 #include "rpcbind.h"
 #include "xlog.h"
 
-static void *rpcbproc_getaddr_4_local __P((void *, struct svc_req *, SVCXPRT *,
-				      rpcvers_t));
-static void *rpcbproc_getversaddr_4_local __P((void *, struct svc_req *, SVCXPRT *, rpcvers_t));
+static void *rpcbproc_getaddr_4_local(void *, struct svc_req *, SVCXPRT *,
+				      rpcvers_t);
+static void *rpcbproc_getversaddr_4_local(void *, struct svc_req *, SVCXPRT *, rpcvers_t);
 static void *rpcbproc_getaddrlist_4_local
-	__P((void *, struct svc_req *, SVCXPRT *, rpcvers_t));
-static void free_rpcb_entry_list __P((rpcb_entry_list_ptr *));
-static void *rpcbproc_dump_4_local __P((void *, struct svc_req *, SVCXPRT *, rpcvers_t));
+	(void *, struct svc_req *, SVCXPRT *, rpcvers_t);
+static void free_rpcb_entry_list(rpcb_entry_list_ptr *);
+static void *rpcbproc_dump_4_local(void *, struct svc_req *, SVCXPRT *, rpcvers_t);
 
 /*
  * Called by svc_getreqset. There is a separate server handle for
@@ -78,7 +78,7 @@
 	} argument;
 	char *result;
 	xdrproc_t xdr_argument, xdr_result;
-	void *(*local) __P((void *, struct svc_req *, SVCXPRT *, rpcvers_t));
+	void *(*local)(void *, struct svc_req *, SVCXPRT *, rpcvers_t);
 	rpcprog_t setprog = 0;
 
 	rpcbs_procinfo(RPCBVERS_4_STAT, rqstp->rq_proc);
--- a/src/rpcb_svc_com.c	2016-10-11 11:18:16.279303104 +0200
+++ b/src/rpcb_svc_com.c	2016-10-11 11:33:04.768271329 +0200
@@ -100,29 +100,29 @@
 static struct finfo     FINFO[NFORWARD];
 
 
-static bool_t xdr_encap_parms __P((XDR *, struct encap_parms *));
-static bool_t xdr_rmtcall_args __P((XDR *, struct r_rmtcall_args *));
-static bool_t xdr_rmtcall_result __P((XDR *, struct r_rmtcall_args *));
-static bool_t xdr_opaque_parms __P((XDR *, struct r_rmtcall_args *));
-static int find_rmtcallfd_by_netid __P((char *));
-static SVCXPRT *find_rmtcallxprt_by_fd __P((int));
-static int forward_register __P((u_int32_t, struct netbuf *, int, char *,
-    rpcproc_t, rpcvers_t, u_int32_t *));
-static struct finfo *forward_find __P((u_int32_t));
-static int free_slot_by_xid __P((u_int32_t));
-static int free_slot_by_index __P((int));
-static int netbufcmp __P((struct netbuf *, struct netbuf *));
-static struct netbuf *netbufdup __P((struct netbuf *));
-static void netbuffree __P((struct netbuf *));
-static int check_rmtcalls __P((struct pollfd *, int));
-static void xprt_set_caller __P((SVCXPRT *, struct finfo *));
-static void send_svcsyserr __P((SVCXPRT *, struct finfo *));
-static void handle_reply __P((int, SVCXPRT *));
-static void find_versions __P((rpcprog_t, char *, rpcvers_t *, rpcvers_t *));
-static rpcblist_ptr find_service __P((rpcprog_t, rpcvers_t, char *));
-static char *getowner __P((SVCXPRT *, char *, size_t));
-static int add_pmaplist __P((RPCB *));
-static int del_pmaplist __P((RPCB *));
+static bool_t xdr_encap_parms(XDR *, struct encap_parms *);
+static bool_t xdr_rmtcall_args(XDR *, struct r_rmtcall_args *);
+static bool_t xdr_rmtcall_result(XDR *, struct r_rmtcall_args *);
+static bool_t xdr_opaque_parms(XDR *, struct r_rmtcall_args *);
+static int find_rmtcallfd_by_netid(char *);
+static SVCXPRT *find_rmtcallxprt_by_fd(int);
+static int forward_register(u_int32_t, struct netbuf *, int, char *,
+    rpcproc_t, rpcvers_t, u_int32_t *);
+static struct finfo *forward_find(u_int32_t);
+static int free_slot_by_xid(u_int32_t);
+static int free_slot_by_index(int);
+static int netbufcmp(struct netbuf *, struct netbuf *);
+static struct netbuf *netbufdup(struct netbuf *);
+static void netbuffree(struct netbuf *);
+static int check_rmtcalls(struct pollfd *, int);
+static void xprt_set_caller(SVCXPRT *, struct finfo *);
+static void send_svcsyserr(SVCXPRT *, struct finfo *);
+static void handle_reply(int, SVCXPRT *);
+static void find_versions(rpcprog_t, char *, rpcvers_t *, rpcvers_t *);
+static rpcblist_ptr find_service(rpcprog_t, rpcvers_t, char *);
+static char *getowner(SVCXPRT *, char *, size_t);
+static int add_pmaplist(RPCB *);
+static int del_pmaplist(RPCB *);
 
 /*
  * Set a mapping of program, version, netid
@@ -536,10 +536,6 @@
 		rmttail->next = rmt;
 		rmttail = rmt;
 	}
-	/* XXX not threadsafe */
-	if (fd > svc_maxfd)
-		svc_maxfd = fd;
-	FD_SET(fd, &svc_fdset);
 	return (fd);
 }
 
@@ -1056,9 +1052,6 @@
 	fi = &FINFO[index];
 	if (fi->flag & FINFO_ACTIVE) {
 		netbuffree(fi->caller_addr);
-		/* XXX may be too big, but can't access xprt array here */
-		if (fi->forward_fd >= svc_maxfd)
-			svc_maxfd--;
 		free(fi->uaddr);
 		fi->flag &= ~FINFO_ACTIVE;
 		rpcb_rmtcalls--;
@@ -1097,35 +1090,27 @@
 }
 
 
-#define	MASKVAL	(POLLIN | POLLPRI | POLLRDNORM | POLLRDBAND)
-extern bool_t __svc_clean_idle(fd_set *, int, bool_t);
-
 void
 my_svc_run()
 {
-	size_t nfds;
-	struct pollfd pollfds[FD_SETSIZE];
 	int poll_ret, check_ret;
 	int n;
-#ifdef SVC_RUN_DEBUG
-	int i;
-#endif
-	register struct pollfd	*p;
-	fd_set cleanfds;
 
 	for (;;) {
-		p = pollfds;
-		for (n = 0; n <= svc_maxfd; n++) {
-			if (FD_ISSET(n, &svc_fdset)) {
-				p->fd = n;
-				p->events = MASKVAL;
-				p++;
-			}
+		struct pollfd my_pollfd[svc_max_pollfd];
+		int i;
+
+		if (svc_max_pollfd == 0 && svc_pollfd == NULL)
+			return;
+
+		for (i = 0; i < svc_max_pollfd; ++i)
+		{
+			my_pollfd[i].fd = svc_pollfd[i].fd;
+			my_pollfd[i].events = svc_pollfd[i].events;
+			my_pollfd[i].revents = 0;
 		}
-		nfds = p - pollfds;
-		poll_ret = 0;
 
-		switch (poll_ret = poll(pollfds, nfds, 30 * 1000)) {
+		switch (poll_ret = poll(my_pollfd, svc_max_pollfd, 30 * 1000)) {
 		case -1:
 			/*
 			 * We ignore all errors, continuing with the assumption
@@ -1133,8 +1118,6 @@
 			 * other outside event) and not caused by poll().
 			 */
 		case 0:
-			cleanfds = svc_fdset;
-			__svc_clean_idle(&cleanfds, 30, FALSE);
 			continue;
 		default:
 			/*
@@ -1144,10 +1127,10 @@
 			 * don't call svc_getreq_poll.  Otherwise, there
 			 * must be another so we must call svc_getreq_poll.
 			 */
-			if ((check_ret = check_rmtcalls(pollfds, nfds)) ==
+			if ((check_ret = check_rmtcalls(my_pollfd, svc_max_pollfd)) ==
 			    poll_ret)
 				continue;
-			svc_getreq_poll(pollfds, poll_ret-check_ret);
+			svc_getreq_poll(my_pollfd, poll_ret-check_ret);
 		}
 	}
 }
--- a/src/rpcbind.c	2016-10-11 11:18:16.279303104 +0200
+++ b/src/rpcbind.c	2016-10-11 11:35:17.290266590 +0200
@@ -87,6 +87,7 @@
 int debugging = 0;	/* Tell me what's going on */
 int doabort = 0;	/* When debugging, do an abort on errors */
 int dofork = 1;		/* fork? */
+int createdsocket = 0;  /* Did I create the socket or systemd did it for me? */
 
 rpcblist_ptr list_rbl;	/* A list of version 3/4 rpcbind services */
 
@@ -135,13 +136,13 @@
 static char servname[] = "rpcbind";
 static char superuser[] = "superuser";
 
-int main __P((int, char *[]));
+int main(int, char *[]);
 
-static int init_transport __P((struct netconfig *));
-static void rbllist_add __P((rpcprog_t, rpcvers_t, struct netconfig *,
-			     struct netbuf *));
-static void terminate __P((int));
-static void parseargs __P((int, char *[]));
+static int init_transport(struct netconfig *);
+static void rbllist_add(rpcprog_t, rpcvers_t, struct netconfig *,
+			     struct netbuf *);
+static void terminate(int);
+static void parseargs(int, char *[]);
 
 int
 main(int argc, char *argv[])
@@ -445,6 +446,7 @@
 		memset(&sun, 0, sizeof sun);
 		sun.sun_family = AF_LOCAL;
 		unlink(_PATH_RPCBINDSOCK);
+		createdsocket = 1; /* We are now in the process of creating the unix socket */
 		strcpy(sun.sun_path, _PATH_RPCBINDSOCK);
 		addrlen = SUN_LEN(&sun);
 		sa = (struct sockaddr *)&sun;
@@ -846,7 +848,8 @@
 terminate(int dummy /*__unused*/)
 {
 	close(rpcbindlockfd);
-	unlink(_PATH_RPCBINDSOCK);
+	if(createdsocket)
+		unlink(_PATH_RPCBINDSOCK);
 	unlink(RPCBINDDLOCK);
 #ifdef WARMSTART
 	write_warmstart();	/* Dump yourself */
--- a/src/security.c	2016-10-11 11:18:16.278303104 +0200
+++ b/src/security.c	2016-10-11 11:35:45.928265566 +0200
@@ -17,6 +17,8 @@
 #include <syslog.h>
 #include <netdb.h>
 
+#include "xlog.h"
+
 /*
  * XXX for special case checks in check_callit.
  */
--- a/src/util.c	2016-10-11 11:18:16.278303104 +0200
+++ b/src/util.c	2016-10-11 11:35:59.352265086 +0200
@@ -70,7 +70,7 @@
 static struct sockaddr_in6 *local_in6;
 #endif
 
-static int bitmaskcmp __P((void *, void *, void *, int));
+static int bitmaskcmp(void *, void *, void *, int);
 
 /*
  * For all bits set in "mask", compare the corresponding bits in
--- a/src/warmstart.c	2016-10-11 11:18:16.277303104 +0200
+++ b/src/warmstart.c	2016-10-11 11:36:17.129264450 +0200
@@ -58,8 +58,8 @@
 #define	PMAPFILE	RPCBIND_STATEDIR "/portmap.xdr"
 #endif
 
-static bool_t write_struct __P((char *, xdrproc_t, void *));
-static bool_t read_struct __P((char *, xdrproc_t, void *));
+static bool_t write_struct(char *, xdrproc_t, void *);
+static bool_t read_struct(char *, xdrproc_t, void *);
 
 static bool_t
 write_struct(char *filename, xdrproc_t structproc, void *list)
